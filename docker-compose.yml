version: "3.8"
services:
  # sos api service
  sos-api:
    container_name: sos-api
    build:
      context: .
      dockerfile: Sos.Api/Dockerfile
    restart: always
    ports:
      - "8080:80"
    command: dotnet watch run --project ./app --urls "http://*:80"
    depends_on:
      - mssql
      - redis
      - kafka
    networks:
      - sos

  # microsoft sql server service
  mssql:
    container_name: mssql_server_2019
    image: mcr.microsoft.com/mssql/server:2019-latest
    restart: always
    ports:
      - "1434:1433"
    volumes:
      - sos-data:/var/opt/mssql
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=Sup4r@dm1n
      - MSSQL_PID=Express
    networks:
      - sos

  # redis service
  redis:
    container_name: redis
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"
    networks:
      - sos

  # zookeeper service
  zookeeper:
    container_name: zookeeper
    image: bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - sos

  # kafka service
  kafka:
    container_name: kafka
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    # entrypoint: kafka-topics.sh --create --topic sos_topic --bootstrap-server localhost:9092
    # entrypoint: >
    #   bash -c "
    #     sleep 30 &&
    #     export KAFKA_TOPICS=$(kafka-topics.sh --list --bootstrap-server localhost:9092) &&
    #     if [[ ! $KAFKA_TOPICS =~ sos_topic ]]; then
    #       kafka-topics.sh --create --topic sos_topic --bootstrap-server localhost:9092
    #     fi
    #   "
    depends_on:
      - zookeeper
    networks:
      - sos

volumes:
  sos-data:

networks:
  sos:
    driver: bridge
